> if (FALSE)
+ {"
+ A Tecator Infratec Food and Feed Analyzer working in the wavelength range 850 - 1050 nm by the
+ Near Infrared Transmission (NIT) principle was used to collect data on samples of finely chopped pure meat.
+ 215 samples were measured. For each sample, the fat content was measured along with a 100 channel spectrum of absorbances.
+ Since determining the fat content via analytical chemistry is time consuming we would like to build a model to predict the fat content of new samples using
+ the 100 absorbances which can be measured more easily.
+ "}
> 
> library(faraway) 
> data(meatspec,package="faraway")
> trainmeat <- meatspec[1:172,] #creates training data set
> testmeat <- meatspec[173:215,] #creates test data set
> head(meatspec)
       V1      V2      V3      V4      V5      V6      V7      V8      V9     V10     V11     V12     V13     V14     V15     V16     V17     V18     V19     V20     V21     V22     V23
1 2.61776 2.61814 2.61859 2.61912 2.61981 2.62071 2.62186 2.62334 2.62511 2.62722 2.62964 2.63245 2.63565 2.63933 2.64353 2.64825 2.65350 2.65937 2.66585 2.67281 2.68008 2.68733 2.69427
2 2.83454 2.83871 2.84283 2.84705 2.85138 2.85587 2.86060 2.86566 2.87093 2.87661 2.88264 2.88898 2.89577 2.90308 2.91097 2.91953 2.92873 2.93863 2.94929 2.96072 2.97272 2.98493 2.99690
3 2.58284 2.58458 2.58629 2.58808 2.58996 2.59192 2.59401 2.59627 2.59873 2.60131 2.60414 2.60714 2.61029 2.61361 2.61714 2.62089 2.62486 2.62909 2.63361 2.63835 2.64330 2.64838 2.65354
4 2.82286 2.82460 2.82630 2.82814 2.83001 2.83192 2.83392 2.83606 2.83842 2.84097 2.84374 2.84664 2.84975 2.85307 2.85661 2.86038 2.86437 2.86860 2.87308 2.87789 2.88301 2.88832 2.89374
5 2.78813 2.78989 2.79167 2.79350 2.79538 2.79746 2.79984 2.80254 2.80553 2.80890 2.81272 2.81704 2.82184 2.82710 2.83294 2.83945 2.84664 2.85458 2.86331 2.87280 2.88291 2.89335 2.90374
6 3.00993 3.01540 3.02086 3.02634 3.03190 3.03756 3.04341 3.04955 3.05599 3.06274 3.06982 3.07724 3.08511 3.09343 3.10231 3.11185 3.12205 3.13294 3.14457 3.15703 3.17038 3.18429 3.19840
      V24     V25     V26     V27     V28     V29     V30     V31     V32     V33     V34     V35     V36     V37     V38     V39     V40     V41     V42     V43     V44     V45     V46
1 2.70073 2.70684 2.71281 2.71914 2.72628 2.73462 2.74416 2.75466 2.76568 2.77679 2.78790 2.79949 2.81225 2.82706 2.84356 2.86106 2.87857 2.89497 2.90924 2.92085 2.93015 2.93846 2.94771
2 3.00833 3.01920 3.02990 3.04101 3.05345 3.06777 3.08416 3.10221 3.12106 3.13983 3.15810 3.17623 3.19519 3.21584 3.23747 3.25889 3.27835 3.29384 3.30362 3.30681 3.30393 3.29700 3.28925
3 2.65870 2.66375 2.66880 2.67383 2.67892 2.68411 2.68937 2.69470 2.70012 2.70563 2.71141 2.71775 2.72490 2.73344 2.74327 2.75433 2.76642 2.77931 2.79272 2.80649 2.82064 2.83541 2.85121
4 2.89917 2.90457 2.90991 2.91521 2.92043 2.92565 2.93082 2.93604 2.94128 2.94658 2.95202 2.95777 2.96419 2.97159 2.98045 2.99090 3.00284 3.01611 3.03048 3.04579 3.06194 3.07889 3.09686
5 2.91371 2.92305 2.93187 2.94060 2.94986 2.96035 2.97241 2.98606 3.00097 3.01652 3.03220 3.04793 3.06413 3.08153 3.10078 3.12185 3.14371 3.16510 3.18470 3.20140 3.21477 3.22544 3.23505
6 3.21225 3.22552 3.23827 3.25084 3.26393 3.27851 3.29514 3.31401 3.33458 3.35591 3.37709 3.39772 3.41828 3.43974 3.46266 3.48663 3.51002 3.53087 3.54711 3.55699 3.55986 3.55656 3.54937
      V47     V48     V49     V50     V51     V52     V53     V54     V55     V56     V57     V58     V59     V60     V61     V62     V63     V64     V65     V66     V67     V68     V69
1 2.96019 2.97831 3.00306 3.03506 3.07428 3.11963 3.16868 3.21771 3.26254 3.29988 3.32847 3.34899 3.36342 3.37379 3.38152 3.38741 3.39164 3.39418 3.39490 3.39366 3.39045 3.38541 3.37869
2 3.28409 3.28505 3.29326 3.30923 3.33267 3.36251 3.39661 3.43188 3.46492 3.49295 3.51458 3.53004 3.54067 3.54797 3.55306 3.55675 3.55921 3.56045 3.56034 3.55876 3.55571 3.55132 3.54585
3 2.86872 2.88905 2.91289 2.94088 2.97325 3.00946 3.04780 3.08554 3.11947 3.14696 3.16677 3.17938 3.18631 3.18924 3.18950 3.18801 3.18498 3.18039 3.17411 3.16611 3.15641 3.14512 3.13241
4 3.11629 3.13775 3.16217 3.19068 3.22376 3.26172 3.30379 3.34793 3.39093 3.42920 3.45998 3.48227 3.49687 3.50558 3.51026 3.51221 3.51215 3.51036 3.50682 3.50140 3.49398 3.48457 3.47333
5 3.24586 3.26027 3.28063 3.30889 3.34543 3.39019 3.44198 3.49800 3.55407 3.60534 3.64789 3.68011 3.70272 3.71815 3.72863 3.73574 3.74059 3.74357 3.74453 3.74336 3.73991 3.73418 3.72638
6 3.54169 3.53692 3.53823 3.54760 3.56512 3.59043 3.62229 3.65830 3.69515 3.72932 3.75803 3.78003 3.79560 3.80614 3.81313 3.81774 3.82079 3.82258 3.82301 3.82206 3.81959 3.81557 3.81021
      V70     V71     V72     V73     V74     V75     V76     V77     V78     V79     V80     V81     V82     V83     V84     V85     V86     V87     V88     V89     V90     V91     V92
1 3.37041 3.36073 3.34979 3.33769 3.32443 3.31013 3.29487 3.27891 3.26232 3.24542 3.22828 3.21080 3.19287 3.17433 3.15503 3.13475 3.11339 3.09116 3.06850 3.04596 3.02393 3.00247 2.98145
2 3.53950 3.53235 3.52442 3.51583 3.50668 3.49700 3.48683 3.47626 3.46552 3.45501 3.44481 3.43477 3.42465 3.41419 3.40303 3.39082 3.37731 3.36265 3.34745 3.33245 3.31818 3.30473 3.29186
3 3.11843 3.10329 3.08714 3.07014 3.05237 3.03393 3.01504 2.99569 2.97612 2.95642 2.93660 2.91667 2.89655 2.87622 2.85563 2.83474 2.81361 2.79235 2.77113 2.75015 2.72956 2.70934 2.68951
4 3.46041 3.44595 3.43005 3.41285 3.39450 3.37511 3.35482 3.33376 3.31204 3.28986 3.26730 3.24442 3.22117 3.19757 3.17357 3.14915 3.12429 3.09908 3.07366 3.04825 3.02308 2.99820 2.97367
5 3.71676 3.70553 3.69289 3.67900 3.66396 3.64785 3.63085 3.61305 3.59463 3.57582 3.55695 3.53796 3.51880 3.49936 3.47938 3.45869 3.43711 3.41458 3.39129 3.36772 3.34450 3.32201 3.30025
6 3.80375 3.79642 3.78835 3.77958 3.77024 3.76040 3.75005 3.73929 3.72831 3.71738 3.70681 3.69664 3.68659 3.67649 3.66611 3.65503 3.64283 3.62938 3.61483 3.59990 3.58535 3.57163 3.55877
      V93     V94     V95     V96     V97     V98     V99    V100  fat
1 2.96072 2.94013 2.91978 2.89966 2.87964 2.85960 2.83940 2.81920 22.5
2 3.27921 3.26655 3.25369 3.24045 3.22659 3.21181 3.19600 3.17942 40.1
3 2.67009 2.65112 2.63262 2.61461 2.59718 2.58034 2.56404 2.54816  8.4
4 2.94951 2.92576 2.90251 2.87988 2.85794 2.83672 2.81617 2.79622  5.9
5 3.27907 3.25831 3.23784 3.21765 3.19766 3.17770 3.15770 3.13753 25.5
6 3.54651 3.53442 3.52221 3.50972 3.49682 3.48325 3.46870 3.45307 42.7
> nrow(meatspec)
[1] 215
> 
> #save graph in pdf
>  pdf(file="C:/Users/jmard/OneDrive/Desktop/RegressionMethodsSpring2020/Ridge_Lasso/ridge_fatinmeatR_Figure.pdf")
> 
> # Basic Scatterplot Matrix
> pairs(~V1+V2+V3+V4+V5+V6,data=meatspec,main="Simple Scatterplot Matrix")
> 
> require(MASS)
Loading required package: MASS
> ##need to install 
> rgmod <- lm.ridge(fat ~ ., trainmeat, lambda = seq(0, 5e-8, len=21))
> matplot(rgmod$lambda, coef(rgmod), type="l", xlab=expression(lambda),ylab=expression(hat(beta)),col=1)
> which.min(rgmod$GCV)  #use the generalized cross validation (GCV) estimate
1.75e-08 
       8 
> abline(v=1.75e-08)
> 
> require(Metrics)#You will need to install the package Metrics#
Loading required package: Metrics
Warning message:
package ‘Metrics’ was built under R version 3.6.3 
> 
> #recall the ridge regression both centers and scales the predictors, so need to do the same in computing the fit#
> #fits on training data set
> ypred <- cbind(1,as.matrix(trainmeat[,-101])) %*% coef(rgmod)[8,]
> rmse(ypred, trainmeat$fat)
[1] 0.8024395
> 
> #fits on test data set
> ytpred <- cbind(1,as.matrix(testmeat[,-101])) %*% coef(rgmod)[8,]#prediction in test data
> rmse(ytpred, testmeat$fat)  #Much larger than found in training data set#
[1] 4.101066
> 
> #bad fit in test data set due to 1 observation?#
> c(ytpred[13],testmeat$fat[13])
[1] 11.16447 34.80000
> 
> rmse(ytpred[-13], testmeat$fat[-13])
[1] 1.979462
> #removal of possible outlier (obs 13) in test data set reduces rmse by over 1/2
> 
> dev.off(0)
pdf 
  2 
> q()
> 
