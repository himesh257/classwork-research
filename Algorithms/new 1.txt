2---------------------------

You are given the dimensions of n boxes. Dimension of one box is given in the form (length, width,height). So, if there are 10 boxes, n=10 and 10 dimensions in the above given format would be given to you. From a programmers point, there are 3 arrays, L[n], W[n] and H[n], where 1<=i<=n and L[i] contains the length of a side of ith box, W[i] contains the width of a side of ith box and  H[i] contains the height of ith box.

Once you have the dimensions of n boxes, you have to find the longest sequence where the sequence of dimensions of boxes are in increasing order so that first box would fit in second box, second box would fit in third box and so on. For example, if you have the dimensions of 10 boxes, you have to find a sequence where you should able to put a first box in the next  box, then that box in its immediate next box and so on. If the dimensions of first box is lesser than the second box, then only first box will fit in second box and if the dimensions of second box is lesser than dimensions of third box, then only second box will fit in third box. While comparing the dimensions, you have to make sure that you compare the corresponding sizes, that is if you are comparing the dimensions of first and second boxes, you need to compare between the length of two boxes, then width of two boxes and then heights but not compare length of first box with width of second box or length of first box with height of second box. So, your goal is to find the maximum length of sequence / maximum number of boxes in the given input, where dimensions of the boxes can be arranged in increasing order. For example, you are given dimensions of 5 boxes as given below.

First box - (1,2,3) , Second box - (5, 3, 4) , Third box - (9, 4, 5), Fourth box - (22,16,19) and Fifth box - (15, 8,17).

Now consider various sequences:

I) 1,3,4,5 - first box fits in third box, third box fits in fourth box, but fourth box does not fit in fifth box. So size of sequence here is three.

II) 1,2,3,4,5- first box fits in second box, second box fits in third box, third box fits in fourth box, but fourth box does not fit in fifth box. So, size of sequence here is four.   

III) 1, 2, 3, 5, 4 - In this case, you can see that first box fits in second box, second box fits in third box, third box fits in fifth box and fifth box fits in fourth box. So, size of sequence is 5 which is same as the number of dimensions given to you. So the length of longest sequence is 5.



	


\begin{equation}
		BOX(i, j, k) = 
			\begin{cases}
				0 \qquad \qquad \qquad \qquad
				\text{if } i = 0 \\
				\text{max }
				\begin{cases}
					\text{max} \ {1+BOX(j) \mid 1 $\leq j$ < i\ } \\
					1 \qquad\qquad \text{otherwise}
				\end{cases}
			\end{cases}
		\end{equation}
		
		
		
		
		
		
		\hfill \bigskip\\*
	\textbf{\underline{Objective:}} To design an algorithm that can identify how the number of boxes that can fit into each other \bigskip\\*
	\textbf{\underline{Algorithm:}}
	\begin{itemize}
		\item The base case is when there are no boxes, meaning n = 0, in that case we retuen 0
		\item if n $\neq$ 0, then we can take recursivley call the algorithm and check if the length, height, and width of boxes are less than the other box which fits in it. We will make sure that we compare the length with length, height with height, and width with width.
	\end{itemize} 
	\textbf{\underline{Recursive formula:}}
		\item{\textbf{Specification:}} if the dimensions of first box is lesser than the second box, then only first box will fit in second box and if the dimensions of second box is lesser than dimensions of third box, then only second box will fit in third box. While comparing the dimensions, we have to make sure that we compare the corresponding sizes, that is if we are comparing the dimensions of first and second boxes, we need to compare between the length of two boxes, then width of two boxes and then heights but not compare length of first box with width of second box or length of first box with height of second box. Hence, the goal is to find the maximum length of sequence / maximum number of boxes in the given input
		\item{\textbf{Recursive solution:}} 
	\end{itemize} 
\textbf{\underline{Proof of Correctness:}}
	\begin{itemize}
		\item 
	\end{itemize}
	\textbf{\underline{Memoization:}} 
		\item Hence, we recursivly added the tips and made sure to decrease the number of pizzas that were supposed to be deliverd (a and/or b)
	\end{itemize}
	
	
	
	
	
	
	\hfill \bigskip\\*
	\textbf{\underline{Objective:}} To design an algorithm that can find the least amount of billboards that needs to be placed so that every house can see it\bigskip\\*
	\textbf{\underline{Algorithm:}}
	\begin{itemize}
		\item We will have to sort the array of houses first and we will use merge sort for that
		\item Once we have a sorted array of houses, we will randomly select a pivot and divide the array into parts
		\item There could be two possibilities, either the difference of d and house location is greter than d or it ie less than or equal to d
		\item If the difference of d and house location is less than or equal to d, then we can 
	\end{itemize} 
	\textbf{\underline{Proof of Correctness:}}
		\begin{itemize}
			\item We iterate over each element and check how many elements are less than the index		
		\end{itemize} 



















