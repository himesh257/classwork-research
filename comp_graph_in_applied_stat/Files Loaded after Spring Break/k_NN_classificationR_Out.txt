> # Read in the data.
> #set filepath for data file
> filepath <- "https://quantdev.ssri.psu.edu/sites/qdev/files/student-mat.csv"
> #read in the .csv file using the url() function
> data <- read.table(file=url(filepath),sep=";",header=TRUE)
> 
> #change all variable names to lowercase
> var.names.data <-tolower(colnames(data))
> colnames(data) <- var.names.data
> head(data)
  school sex age address famsize pstatus medu fedu     mjob     fjob     reason guardian traveltime studytime failures schoolsup famsup paid activities
1     GP   F  18       U     GT3       A    4    4  at_home  teacher     course   mother          2         2        0       yes     no   no         no
2     GP   F  17       U     GT3       T    1    1  at_home    other     course   father          1         2        0        no    yes   no         no
3     GP   F  15       U     LE3       T    1    1  at_home    other      other   mother          1         2        3       yes     no  yes         no
4     GP   F  15       U     GT3       T    4    2   health services       home   mother          1         3        0        no    yes  yes        yes
5     GP   F  16       U     GT3       T    3    3    other    other       home   father          1         2        0        no    yes  yes         no
6     GP   M  16       U     LE3       T    4    3 services    other reputation   mother          1         2        0        no    yes  yes        yes
  nursery higher internet romantic famrel freetime goout dalc walc health absences g1 g2 g3
1     yes    yes       no       no      4        3     4    1    1      3        6  5  6  6
2      no    yes      yes       no      5        3     3    1    1      3        4  5  5  6
3     yes    yes      yes       no      4        3     2    2    3      3       10  7  8 10
4     yes    yes      yes      yes      3        2     2    1    1      5        2 15 14 15
5     yes    yes       no       no      4        3     2    1    2      5        4  6 10 10
6     yes    yes      yes       no      5        4     2    1    2      5       10 15 15 15
> 
> #libraries needed  install if needed
> 
> library(faraway)
> library(caret)
Loading required package: lattice

Attaching package: ‘lattice’

The following object is masked from ‘package:faraway’:

    melanoma

Loading required package: ggplot2
Warning message:
package ‘ggplot2’ was built under R version 3.6.3 
> library(class)
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Warning message:
package ‘dplyr’ was built under R version 3.6.3 
> library(e1071)
Warning message:
package ‘e1071’ was built under R version 3.6.3 
> library(FNN)

Attaching package: ‘FNN’

The following objects are masked from ‘package:class’:

    knn, knn.cv

Warning message:
package ‘FNN’ was built under R version 3.6.3 
> library(gmodels)
Warning message:
package ‘gmodels’ was built under R version 3.6.3 
> library(psych)

Attaching package: ‘psych’

The following objects are masked from ‘package:ggplot2’:

    %+%, alpha

The following object is masked from ‘package:faraway’:

    logit

> 
> data_class <- data
> 
> # put outcome in its own object
> mjob_outcome <- data_class %>% select(mjob)
> # remove original variable from the data set
> data_class <- data_class %>% select(-mjob)
> 
> str(data_class)
'data.frame':   395 obs. of  32 variables:
 $ school    : Factor w/ 2 levels "GP","MS": 1 1 1 1 1 1 1 1 1 1 ...
 $ sex       : Factor w/ 2 levels "F","M": 1 1 1 1 1 2 2 1 2 2 ...
 $ age       : int  18 17 15 15 16 16 16 17 15 15 ...
 $ address   : Factor w/ 2 levels "R","U": 2 2 2 2 2 2 2 2 2 2 ...
 $ famsize   : Factor w/ 2 levels "GT3","LE3": 1 1 2 1 1 2 2 1 2 1 ...
 $ pstatus   : Factor w/ 2 levels "A","T": 1 2 2 2 2 2 2 1 1 2 ...
 $ medu      : int  4 1 1 4 3 4 2 4 3 3 ...
 $ fedu      : int  4 1 1 2 3 3 2 4 2 4 ...
 $ fjob      : Factor w/ 5 levels "at_home","health",..: 5 3 3 4 3 3 3 5 3 3 ...
 $ reason    : Factor w/ 4 levels "course","home",..: 1 1 3 2 2 4 2 2 2 2 ...
 $ guardian  : Factor w/ 3 levels "father","mother",..: 2 1 2 2 1 2 2 2 2 2 ...
 $ traveltime: int  2 1 1 1 1 1 1 2 1 1 ...
 $ studytime : int  2 2 2 3 2 2 2 2 2 2 ...
 $ failures  : int  0 0 3 0 0 0 0 0 0 0 ...
 $ schoolsup : Factor w/ 2 levels "no","yes": 2 1 2 1 1 1 1 2 1 1 ...
 $ famsup    : Factor w/ 2 levels "no","yes": 1 2 1 2 2 2 1 2 2 2 ...
 $ paid      : Factor w/ 2 levels "no","yes": 1 1 2 2 2 2 1 1 2 2 ...
 $ activities: Factor w/ 2 levels "no","yes": 1 1 1 2 1 2 1 1 1 2 ...
 $ nursery   : Factor w/ 2 levels "no","yes": 2 1 2 2 2 2 2 2 2 2 ...
 $ higher    : Factor w/ 2 levels "no","yes": 2 2 2 2 2 2 2 2 2 2 ...
 $ internet  : Factor w/ 2 levels "no","yes": 1 2 2 2 1 2 2 1 2 2 ...
 $ romantic  : Factor w/ 2 levels "no","yes": 1 1 1 2 1 1 1 1 1 1 ...
 $ famrel    : int  4 5 4 3 4 5 4 4 4 5 ...
 $ freetime  : int  3 3 3 2 3 4 4 1 2 5 ...
 $ goout     : int  4 3 2 2 2 2 4 4 2 1 ...
 $ dalc      : int  1 1 2 1 1 1 1 1 1 1 ...
 $ walc      : int  1 1 3 1 2 2 1 1 1 1 ...
 $ health    : int  3 3 3 5 5 5 3 1 1 5 ...
 $ absences  : int  6 4 10 2 4 10 0 6 0 0 ...
 $ g1        : int  5 5 7 15 6 15 12 6 16 14 ...
 $ g2        : int  6 5 8 14 10 15 12 5 18 15 ...
 $ g3        : int  6 6 10 15 10 15 11 6 19 15 ...
> 
> data_class[, c("age", "medu", "fedu", "traveltime", "studytime", "failures", "famrel", "freetime", "goout", "dalc", "walc",
+  "health", "absences", "g1", "g2", "g3")] <- scale(data_class[, c("age", "medu", "fedu", "traveltime", "studytime", "failures",
+  "famrel", "freetime", "goout", "dalc", "walc", "health", "absences", "g1", "g2", "g3")])
> 
> head(data_class)
  school sex        age address famsize pstatus       medu       fedu     fjob     reason guardian traveltime   studytime   failures schoolsup famsup paid
1     GP   F  1.0217506       U     GT3       A  1.1424068  1.3586476  teacher     course   mother  0.7912473 -0.04223229 -0.4493737       yes     no   no
2     GP   F  0.2380778       U     GT3       T -1.5979820 -1.3981972    other     course   father -0.6424347 -0.04223229 -0.4493737        no    yes   no
3     GP   F -1.3292678       U     LE3       T -1.5979820 -1.3981972    other      other   mother -0.6424347 -0.04223229  3.5847768       yes     no  yes
4     GP   F -1.3292678       U     GT3       T  1.1424068 -0.4792490 services       home   mother -0.6424347  1.14932149 -0.4493737        no    yes  yes
5     GP   F -0.5455950       U     GT3       T  0.2289439  0.4396993    other       home   father -0.6424347 -0.04223229 -0.4493737        no    yes  yes
6     GP   M -0.5455950       U     LE3       T  1.1424068  0.4396993    other reputation   mother -0.6424347 -0.04223229 -0.4493737        no    yes  yes
  activities nursery higher internet romantic      famrel   freetime       goout       dalc       walc     health    absences        g1         g2
1         no     yes    yes       no       no  0.06211528 -0.2357113  0.80046413 -0.5400138 -1.0025178 -0.3987837  0.03637833 -1.780209 -1.2532017
2         no      no    yes      yes       no  1.17736694 -0.2357113 -0.09778397 -0.5400138 -1.0025178 -0.3987837 -0.21352497 -1.780209 -1.5190528
3         no     yes    yes      yes       no  0.06211528 -0.2357113 -0.99603207  0.5826465  0.5504019 -0.3987837  0.53618492 -1.177653 -0.7214996
4        yes     yes    yes      yes      yes -1.05313638 -1.2368505 -0.99603207 -0.5400138 -1.0025178  1.0397512 -0.46342827  1.232570  0.8736068
5         no     yes    yes       no       no  0.06211528 -0.2357113 -0.99603207 -0.5400138 -0.2260579  1.0397512 -0.21352497 -1.478931 -0.1897975
6        yes     yes    yes      yes       no  1.17736694  0.7654280 -0.99603207 -0.5400138 -0.2260579  1.0397512  0.53618492  1.232570  1.1394578
           g3
1 -0.96371171
2 -0.96371171
3 -0.09062427
4  1.00073503
5 -0.09062427
6  1.00073503
> 
> str(data_class)
'data.frame':   395 obs. of  32 variables:
 $ school    : Factor w/ 2 levels "GP","MS": 1 1 1 1 1 1 1 1 1 1 ...
 $ sex       : Factor w/ 2 levels "F","M": 1 1 1 1 1 2 2 1 2 2 ...
 $ age       : num  1.022 0.238 -1.329 -1.329 -0.546 ...
 $ address   : Factor w/ 2 levels "R","U": 2 2 2 2 2 2 2 2 2 2 ...
 $ famsize   : Factor w/ 2 levels "GT3","LE3": 1 1 2 1 1 2 2 1 2 1 ...
 $ pstatus   : Factor w/ 2 levels "A","T": 1 2 2 2 2 2 2 1 1 2 ...
 $ medu      : num  1.142 -1.598 -1.598 1.142 0.229 ...
 $ fedu      : num  1.359 -1.398 -1.398 -0.479 0.44 ...
 $ fjob      : Factor w/ 5 levels "at_home","health",..: 5 3 3 4 3 3 3 5 3 3 ...
 $ reason    : Factor w/ 4 levels "course","home",..: 1 1 3 2 2 4 2 2 2 2 ...
 $ guardian  : Factor w/ 3 levels "father","mother",..: 2 1 2 2 1 2 2 2 2 2 ...
 $ traveltime: num  0.791 -0.642 -0.642 -0.642 -0.642 ...
 $ studytime : num  -0.0422 -0.0422 -0.0422 1.1493 -0.0422 ...
 $ failures  : num  -0.449 -0.449 3.585 -0.449 -0.449 ...
 $ schoolsup : Factor w/ 2 levels "no","yes": 2 1 2 1 1 1 1 2 1 1 ...
 $ famsup    : Factor w/ 2 levels "no","yes": 1 2 1 2 2 2 1 2 2 2 ...
 $ paid      : Factor w/ 2 levels "no","yes": 1 1 2 2 2 2 1 1 2 2 ...
 $ activities: Factor w/ 2 levels "no","yes": 1 1 1 2 1 2 1 1 1 2 ...
 $ nursery   : Factor w/ 2 levels "no","yes": 2 1 2 2 2 2 2 2 2 2 ...
 $ higher    : Factor w/ 2 levels "no","yes": 2 2 2 2 2 2 2 2 2 2 ...
 $ internet  : Factor w/ 2 levels "no","yes": 1 2 2 2 1 2 2 1 2 2 ...
 $ romantic  : Factor w/ 2 levels "no","yes": 1 1 1 2 1 1 1 1 1 1 ...
 $ famrel    : num  0.0621 1.1774 0.0621 -1.0531 0.0621 ...
 $ freetime  : num  -0.236 -0.236 -0.236 -1.237 -0.236 ...
 $ goout     : num  0.8005 -0.0978 -0.996 -0.996 -0.996 ...
 $ dalc      : num  -0.54 -0.54 0.583 -0.54 -0.54 ...
 $ walc      : num  -1.003 -1.003 0.55 -1.003 -0.226 ...
 $ health    : num  -0.399 -0.399 -0.399 1.04 1.04 ...
 $ absences  : num  0.0364 -0.2135 0.5362 -0.4634 -0.2135 ...
 $ g1        : num  -1.78 -1.78 -1.18 1.23 -1.48 ...
 $ g2        : num  -1.253 -1.519 -0.721 0.874 -0.19 ...
 $ g3        : num  -0.9637 -0.9637 -0.0906 1.0007 -0.0906 ...
> 
> #We now dummy code variables that have just two levels and are coded 1/0.
> 
> data_class$schoolsup <- ifelse(data_class$schoolsup == "yes", 1, 0)
> data_class$famsup <- ifelse(data_class$famsup == "yes", 1, 0)
> data_class$paid <- ifelse(data_class$paid == "yes", 1, 0)
> data_class$activities <- ifelse(data_class$activities == "yes", 1, 0)
> data_class$nursery <- ifelse(data_class$nursery == "yes", 1, 0)
> data_class$higher <- ifelse(data_class$higher == "yes", 1, 0)
> data_class$internet <- ifelse(data_class$internet == "yes", 1, 0)
> data_class$romantic <- ifelse(data_class$romantic == "yes", 1, 0)
> 
> #Then dummy code variables that have two levels, but are not numeric.
> 
> data_class$school <- dummy.code(data_class$school)
> data_class$sex <- dummy.code(data_class$sex)
> data_class$address <- dummy.code(data_class$address)
> data_class$famsize <- dummy.code(data_class$famsize)
> data_class$pstatus <- dummy.code(data_class$pstatus)
> 
> #Next we dummy code variables that have three or more levels.
> 
> fjob <- as.data.frame(dummy.code(data_class$fjob))
> reason <- as.data.frame(dummy.code(data_class$reason))
> guardian <- as.data.frame(dummy.code(data_class$guardian))
> 
> #Rename “other” columns in “fjob”, “reason,” and “guardian,” and rename 
> # “health” in “fjob” (so we don’t have duplicate columns later).
> 
> fjob <- rename(fjob, other_fjob = other)
> fjob <- rename(fjob, health_fjob = health)
> 
> reason <- rename(reason, other_reason = other)
> 
> guardian <- rename(guardian, other_guardian = other)
> 
> #Combine new dummy variables with original data set.
> 
> data_class <- cbind(data_class, fjob, guardian, reason)
> 
> #Remove original variables that had to be dummy coded
> 
> data_class <- data_class %>% select(-one_of(c("fjob", "guardian", "reason")))
> head(data_class)
  school.GP school.MS sex.F sex.M        age address.U address.R famsize.GT3 famsize.LE3 pstatus.T pstatus.A       medu       fedu traveltime   studytime
1         1         0     1     0  1.0217506         1         0           1           0         0         1  1.1424068  1.3586476  0.7912473 -0.04223229
2         1         0     1     0  0.2380778         1         0           1           0         1         0 -1.5979820 -1.3981972 -0.6424347 -0.04223229
3         1         0     1     0 -1.3292678         1         0           0           1         1         0 -1.5979820 -1.3981972 -0.6424347 -0.04223229
4         1         0     1     0 -1.3292678         1         0           1           0         1         0  1.1424068 -0.4792490 -0.6424347  1.14932149
5         1         0     1     0 -0.5455950         1         0           1           0         1         0  0.2289439  0.4396993 -0.6424347 -0.04223229
6         1         0     0     1 -0.5455950         1         0           0           1         1         0  1.1424068  0.4396993 -0.6424347 -0.04223229
    failures schoolsup famsup paid activities nursery higher internet romantic      famrel   freetime       goout       dalc       walc     health
1 -0.4493737         1      0    0          0       1      1        0        0  0.06211528 -0.2357113  0.80046413 -0.5400138 -1.0025178 -0.3987837
2 -0.4493737         0      1    0          0       0      1        1        0  1.17736694 -0.2357113 -0.09778397 -0.5400138 -1.0025178 -0.3987837
3  3.5847768         1      0    1          0       1      1        1        0  0.06211528 -0.2357113 -0.99603207  0.5826465  0.5504019 -0.3987837
4 -0.4493737         0      1    1          1       1      1        1        1 -1.05313638 -1.2368505 -0.99603207 -0.5400138 -1.0025178  1.0397512
5 -0.4493737         0      1    1          0       1      1        0        0  0.06211528 -0.2357113 -0.99603207 -0.5400138 -0.2260579  1.0397512
6 -0.4493737         0      1    1          1       1      1        1        0  1.17736694  0.7654280 -0.99603207 -0.5400138 -0.2260579  1.0397512
     absences        g1         g2          g3 other_fjob services teacher at_home health_fjob mother father other_guardian course home reputation
1  0.03637833 -1.780209 -1.2532017 -0.96371171          0        0       1       0           0      1      0              0      1    0          0
2 -0.21352497 -1.780209 -1.5190528 -0.96371171          1        0       0       0           0      0      1              0      1    0          0
3  0.53618492 -1.177653 -0.7214996 -0.09062427          1        0       0       0           0      1      0              0      0    0          0
4 -0.46342827  1.232570  0.8736068  1.00073503          0        1       0       0           0      1      0              0      0    1          0
5 -0.21352497 -1.478931 -0.1897975 -0.09062427          1        0       0       0           0      0      1              0      0    1          0
6  0.53618492  1.232570  1.1394578  1.00073503          1        0       0       0           0      1      0              0      0    0          1
  other_reason
1            0
2            0
3            1
4            0
5            0
6            0
> 
> #Now we’re ready for k-NN classification!
> #We split the data into training and test sets. We partition 75% of the data 
> # into the training set and the remaining 25% into the test set.
> 
> set.seed(1234) # set the seed to make the partition reproducible
> # 75% of the sample size
> smp_size <- floor(0.75 * nrow(data_class))
> train_ind <- sample(seq_len(nrow(data_class)), size = smp_size)
> # creating test and training sets that contain all of the predictors
> class_pred_train <- data_class[train_ind, ]
> class_pred_test <- data_class[-train_ind, ]
> 
> #Split outcome variable into training and test sets using the same partition as above.
> 
> mjob_outcome_train <- mjob_outcome[train_ind, ]
> mjob_outcome_test <- mjob_outcome[-train_ind, ]
> 
> #Use class package. Run k-NN classification.
> #We have to decide on the number of neighbors (k). There are several rules of thumb, 
> # one being the square root of the number of observations in the training set. In this case, 
> #we select 17 as the number of neighbors, which is approximately the square root of our sample size N = 296.
> 
> mjob_pred_knn <- knn(train = class_pred_train, test = class_pred_test, cl = mjob_outcome_train, k=17)
> 
> #Model evaluation.
> # put "mjob_outcome_test" in a data frame
> mjob_outcome_test <- data.frame(mjob_outcome_test)
> 
> # merge "mjob_pred_knn" and "mjob_outcome_test"
> class_comparison <- data.frame(mjob_pred_knn, mjob_outcome_test)
> 
> # specify column names for "class_comparison"
> names(class_comparison) <- c("PredictedMjob", "ObservedMjob")
> 
> # inspect "class_comparison"
> head(class_comparison)
  PredictedMjob ObservedMjob
1         other      at_home
2      services      at_home
3         other        other
4         other        other
5         other     services
6       teacher      teacher
> 
> # create table examining model accuracy
> CrossTable(x = class_comparison$ObservedMjob, y = class_comparison$PredictedMjob, prop.chisq=FALSE, prop.c = FALSE, prop.r =
+ FALSE, prop.t = FALSE)

 
   Cell Contents
|-------------------------|
|                       N |
|-------------------------|

 
Total Observations in Table:  99 

 
                              | class_comparison$PredictedMjob 
class_comparison$ObservedMjob |   at_home |    health |     other |  services |   teacher | Row Total | 
------------------------------|-----------|-----------|-----------|-----------|-----------|-----------|
                      at_home |         1 |         0 |        14 |         3 |         0 |        18 | 
------------------------------|-----------|-----------|-----------|-----------|-----------|-----------|
                       health |         0 |         0 |         5 |         4 |         0 |         9 | 
------------------------------|-----------|-----------|-----------|-----------|-----------|-----------|
                        other |         0 |         1 |        25 |         1 |         0 |        27 | 
------------------------------|-----------|-----------|-----------|-----------|-----------|-----------|
                     services |         1 |         0 |        18 |         5 |         0 |        24 | 
------------------------------|-----------|-----------|-----------|-----------|-----------|-----------|
                      teacher |         0 |         1 |         9 |         7 |         4 |        21 | 
------------------------------|-----------|-----------|-----------|-----------|-----------|-----------|
                 Column Total |         2 |         2 |        71 |        20 |         4 |        99 | 
------------------------------|-----------|-----------|-----------|-----------|-----------|-----------|

 
> 
> #The results of the Cross Table indicate that our model did not predict mother’s job very well.
> 
> #Use caret package to run k-NN classification.
> #In this package, the function picks the optimal number of neighbors (k) for you.
> 
> mjob_pred_caret <- train(class_pred_train, mjob_outcome_train, method = "knn", preProcess = c("center","scale"))
> 
> #Looking at the output of the caret package k-NN model, we can see that it chose k = 9, 
> #given that this was the number at which accuracy and kappa peaked.
> 
> mjob_pred_caret
k-Nearest Neighbors 

296 samples
 41 predictor
  5 classes: 'at_home', 'health', 'other', 'services', 'teacher' 

Pre-processing: centered (36), scaled (36), ignore (5) 
Resampling: Bootstrapped (25 reps) 
Summary of sample sizes: 296, 296, 296, 296, 296, 296, ... 
Resampling results across tuning parameters:

  k  Accuracy   Kappa     
  5  0.3051194  0.05974123
  7  0.3207804  0.06912750
  9  0.3355301  0.07747455

Accuracy was used to select the optimal model using the largest value.
The final value used for the model was k = 9.
> 
> 
> #save graph(s) in pdf
> windows(7,7)
>  pdf(file="C:/Users/jmard/OneDrive/Desktop/Computing and Graphics in Applied Statistics2020/Output/k_NN_classification_Figure.pdf")
> 
> plot(mjob_pred_caret)  #this plot also shows accuracy peaking at 9
> 
> #compare our predicted values of mjob to our actual values
> 
> knnPredict <- predict(mjob_pred_caret, newdata = class_pred_test)
> confusionMatrix(knnPredict, mjob_outcome_test$mjob_outcome_test)
Confusion Matrix and Statistics

          Reference
Prediction at_home health other services teacher
  at_home        3      0     3        1       1
  health         0      2     2        0       0
  other         11      4    19       12       5
  services       3      1     3        8       8
  teacher        1      2     0        3       7

Overall Statistics
                                          
               Accuracy : 0.3939          
                 95% CI : (0.2972, 0.4972)
    No Information Rate : 0.2727          
    P-Value [Acc > NIR] : 0.005911        
                                          
                  Kappa : 0.1994          
                                          
 Mcnemar's Test P-Value : NA              

Statistics by Class:

                     Class: at_home Class: health Class: other Class: services
Sensitivity                 0.16667       0.22222       0.7037         0.33333
Specificity                 0.93827       0.97778       0.5556         0.80000
Pos Pred Value              0.37500       0.50000       0.3725         0.34783
Neg Pred Value              0.83516       0.92632       0.8333         0.78947
Prevalence                  0.18182       0.09091       0.2727         0.24242
Detection Rate              0.03030       0.02020       0.1919         0.08081
Detection Prevalence        0.08081       0.04040       0.5152         0.23232
Balanced Accuracy           0.55247       0.60000       0.6296         0.56667
                     Class: teacher
Sensitivity                 0.33333
Specificity                 0.92308
Pos Pred Value              0.53846
Neg Pred Value              0.83721
Prevalence                  0.21212
Detection Rate              0.07071
Detection Prevalence        0.13131
Balanced Accuracy           0.62821
> 
> #-------------------------------------------------------------------------------------------------------#
> #end of KNN classification
> #The model did not perform well - note the low accuracy (proportion of correctly classified cases) of the model.
> #Important consideration: A large number of our predictor variables were binary or dummy-coded
> #categorical variables, which are not necessarily the most suited for k-NN
> 
> dev.off()
