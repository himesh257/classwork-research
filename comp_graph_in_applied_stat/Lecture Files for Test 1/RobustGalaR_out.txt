> if (FALSE) 
+ {"
+ Robust Regression is performed in R using the quantreg package
+ LAD is the default robust regression procedure that is used.
+ See page 126 of textbook - generate LAD on Gala data
+ ;
+ "}  
> 
> #install.packages("quantreg") #need to install this package if it is not already installed
> 
> library(faraway)
> 
> #fit the OLS model
> lmod <- lm(Species ~ Area+Elevation+Nearest+Scruz+Adjacent, data=gala)
> summary(lmod)

Call:
lm(formula = Species ~ Area + Elevation + Nearest + Scruz + Adjacent, 
    data = gala)

Residuals:
     Min       1Q   Median       3Q      Max 
-111.679  -34.898   -7.862   33.460  182.584 

Coefficients:
             Estimate Std. Error t value Pr(>|t|)    
(Intercept)  7.068221  19.154198   0.369 0.715351    
Area        -0.023938   0.022422  -1.068 0.296318    
Elevation    0.319465   0.053663   5.953 3.82e-06 ***
Nearest      0.009144   1.054136   0.009 0.993151    
Scruz       -0.240524   0.215402  -1.117 0.275208    
Adjacent    -0.074805   0.017700  -4.226 0.000297 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 60.98 on 24 degrees of freedom
Multiple R-squared:  0.7658,    Adjusted R-squared:  0.7171 
F-statistic:  15.7 on 5 and 24 DF,  p-value: 6.838e-07

> confint(lmod)
                  2.5 %      97.5 %
(Intercept) -32.4641006 46.60054205
Area         -0.0702158  0.02233912
Elevation     0.2087102  0.43021935
Nearest      -2.1664857  2.18477363
Scruz        -0.6850926  0.20404416
Adjacent     -0.1113362 -0.03827344
> 
> set.seed(15324)  #set the seed for random number generation that is used
> #fit the LAD model - minimize the sum of the absolute values of (data - fit) |yi - yhati|
> require(quantreg)
Loading required package: quantreg
Loading required package: SparseM

Attaching package: ‘SparseM’

The following object is masked from ‘package:base’:

    backsolve


Attaching package: ‘quantreg’

The following object is masked from ‘package:survival’:

    untangle.specials

> 
> #note the rq function generates the LAD results
> LADmodel <- rq(Species ~ Area+Elevation+Nearest+Scruz+Adjacent, data=gala)  
> summary(LADmodel)

Call: rq(formula = Species ~ Area + Elevation + Nearest + Scruz + Adjacent, 
    data = gala)

tau: [1] 0.5

Coefficients:
            coefficients lower bd  upper bd 
(Intercept)   1.31445    -19.87777  24.37411
Area         -0.00306     -0.03185   0.52800
Elevation     0.23211      0.12453   0.50196
Nearest       0.16366     -3.16339   2.98896
Scruz        -0.12314     -0.47987   0.13476
Adjacent     -0.05185     -0.10458   0.01739
> 
> #use bootstrapping to obtain the confidence intervals
> 
> bcoef <- matrix(0,1000,6)  #generate a 1000 by 6 matrix of 0s which will be populated with the bootstrap regression results
> head(bcoef)
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,]    0    0    0    0    0    0
[2,]    0    0    0    0    0    0
[3,]    0    0    0    0    0    0
[4,]    0    0    0    0    0    0
[5,]    0    0    0    0    0    0
[6,]    0    0    0    0    0    0
> 
> #want s(b1), s(b2), s(b3), s(b4), s(b5)
> #have e1, e2, e3, . . . , e30  ecdf (or Fhat) of the eis is a good estimator of F
> 
> #start the boot strap process
> 
> #generate a n=30 sample of eis with replacement: e*1, e*2, e*3, . . . , e*30
> #compute y*i=bo + b1x1i + b2x2i +b3x3i + b4x4i + b5x5i + e*i  for i=1, 2, . . ., 30 
> #perform LAD and record b11 b21 b31 b41 b51 from the the first bootstrapped sample
> #repeat a large number times, 1000 in this case
> #have b1i, b2i, b3i b4i, b5i from i=1 to 1000
> #compute the 0.0275 and the 0.975 quantiles of the 1000 b1is, b2is, b3is, b4is, b5is
> 
> #A 95% bootstrapped CI on b1 is equal (0.0275 quantile, 0.975 quantile) of the b1is
> #Repeat for b2, b3, b4, b5
> 
> for(i in 1:1000){
+ newy <- predict(LADmodel) + residuals(LADmodel)[sample(30,rep=TRUE)]  #take a sample of residuals and generate new y values
+ brg <- rq(newy  ~ Area + Elevation + Nearest + Scruz + Adjacent, data= gala)
+ bcoef[i,] <- brg$coef
+ }
> head(bcoef) #prints out the first 6 observations 
           [,1]         [,2]      [,3]       [,4]        [,5]        [,6]
[1,]   3.530125  0.002955623 0.2010468 -0.1325066 -0.01444549 -0.02051907
[2,]  -1.733299 -0.019135950 0.2681103  0.3601197 -0.21687894 -0.05246155
[3,]  -8.674861  0.002102070 0.2389460  0.1696673 -0.09347053 -0.04683037
[4,]  -1.365737  0.001444800 0.2216453  1.0309503 -0.21207410 -0.04963270
[5,]  14.351705  0.001770554 0.2241110  1.0807213 -0.31648592 -0.04963953
[6,] -16.982718 -0.008227447 0.2589584 -0.2008309  0.71193728 -0.06456150
> 
> colnames(bcoef) <- names(coef(LADmodel))
> 
> #apply:Returns a vector or array or list of values obtained
> #        by applying a function to margins of an array or matrix
> #        the 2 in the statement indicates to operate over columns.  A 1 indicates to operate over rows
> #  for example, col.sums <- apply(x, 2, sum)  sums the columns of the x matrix
> #        row.sums <- apply(x, 1, sum) sums the rows of the x matrix
> 
> apply(bcoef,2,function(x) quantile(x, c(0.025,0.975)))
      (Intercept)        Area Elevation   Nearest      Scruz    Adjacent
2.5%    -19.24376 -0.03076586 0.1698765 -1.118055 -0.4044697 -0.07363902
97.5%    33.79350  0.04701217 0.3066570  2.115245  0.2551070 -0.00774367
> bcoef <- data.frame(bcoef)
> head(bcoef)
  X.Intercept.         Area Elevation    Nearest       Scruz    Adjacent
1     3.530125  0.002955623 0.2010468 -0.1325066 -0.01444549 -0.02051907
2    -1.733299 -0.019135950 0.2681103  0.3601197 -0.21687894 -0.05246155
3    -8.674861  0.002102070 0.2389460  0.1696673 -0.09347053 -0.04683037
4    -1.365737  0.001444800 0.2216453  1.0309503 -0.21207410 -0.04963270
5    14.351705  0.001770554 0.2241110  1.0807213 -0.31648592 -0.04963953
6   -16.982718 -0.008227447 0.2589584 -0.2008309  0.71193728 -0.06456150
> 
> 
> #now save the ecdf in a pdf file
>  pdf(file="C:/users/jmard/Desktop/Computing and Graphics in Applied Statistics2020/Lecture 07 11Feb2020/RobustGalaR_out.pdf")
> 
> 
> require(ggplot2)  #Review the bootstrapping results for Area and Adjacent
Loading required package: ggplot2
> 
> p1 <- ggplot(bcoef, aes(x = Area)) + geom_density() + xlim(-0.08, 0.08)
> p1 + geom_vline(xintercept=c(-0.03076586, 0.04701217), linetype="dashed")
> 
> p2 <- ggplot(bcoef, aes(x = Adjacent)) + geom_density() + xlim(-0.10, 0.02)
> p2 + geom_vline(xintercept=c(-0.07363902, -0.00774367), linetype="dashed")
Warning message:
Removed 1 rows containing non-finite values (stat_density). 
> 
> dev.off()
null device 
          1 
> 
